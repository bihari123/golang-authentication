# Defination
JSON Web Tokens(JWT) is an open standard that defines a compact and self contained way for securely transmitting information between parties as a JSOn object.
This information can be verified and trusted because it is digitally signed.
JWTs can be signed using a secret( with the HMAC algorithm) or a public/private key pair using RSA or ECDSA.
Although JWTs ca be encrypted to also provided secrecy between parties, we will focus on the signed tokens. Signed tokens can verify the integrity of the claims
contained within it, while encrypted tokens hide those claims from other parties. When tokens are signed using public/private key pairs, the signature also certifies that only the party holding the private key is the one that signed it.

## When should you use JSON Web Tokens?

- Here are some scenarios where JSON Web Tokens are useful:

    - Authorization: This is the most common scenario for using JWT. Once the user is logged in, each subsequent request will include the JWT, allowing the user to access routes, services, and resources that are permitted with that token. Single Sign On is a feature that widely uses JWT nowadays, because of its small overhead and its ability to be easily used across different domains.

    - Information Exchange: JSON Web Tokens are a good way of securely transmitting information between parties. Because JWTs can be signed—for example, using public/private key pairs—you can be sure the senders are who they say they are. Additionally, as the signature is calculated using the header and the payload, you can also verify that the content hasn't been tampered with.

# What is the JSON Web Token structure?

In its compact form, JSON Web Tokens consist of three parts separated by dots (.), which are:

  -  Header
  -  Payload
  -  Signature

Therefore, a JWT typically looks like the following.
xxxxx.yyyyy.zzzzz
Let's break down the different parts.

# Header 

The header typically consists of two parts: the type of the token, which is JWT, and the signing algorithm being used, such as HMAC SHA256 or RSA.

For example:

{
  "alg": "HS256",
  "typ": "JWT"
}
Then, this JSON is Base64Url encoded to form the first part of the JWT.

# Payload 
the second part of the token is the payload, which contains the claims. Claims are the statements about entity( typically the user)and additional data. There are three types of claims: registered,public and private claims.
 - Registered claims: These are a set of predefined claims which are not mandatory but recommended, to provide a set of useful, interoperable claims. 
  Some of them are: iss (issuer), exp (expiration time), sub (subject), aud (audience), and others.
    Notice that the claim names are only three characters long as JWT is meant to be compact.
 
 - Public claims: These can be defined at will by those using JWTs. 
   But to avoid collisions they should be defined in the IANA JSON Web Token Registry or be defined as a URI that contains a collision resistant namespace.

 - Private claims: These are the custom claims created to share information between parties that agree on using them and are neither registered or public claims.
   
   An example payload could be:

{
  "sub": "1234567890",
  "name": "John Doe",
  "admin": true
}

  The payload is then Base64Url encoded to form the second part of the JSON Web Token.

    Do note that for signed tokens this information, though protected against tampering, is readable by anyone. Do not put secret information in the payload or header elements of a JWT unless it is encrypted.

# Signature 
To create the signature part you have to take the encoded header, the encoded payload, a secret, the algorithm specified in the header, and sign that.

For example if you want to use the HMAC SHA256 algorithm, the signature will be created in the following way:

HMACSHA256(
  base64UrlEncode(header) + "." +
  base64UrlEncode(payload),
  secret)

The signature is used to verify the message wasn't changed along the way, and, in the case of tokens signed with a private key, it can also verify that the sender of the JWT is who it says it is.


# Difference between authentication and authorization
 - Authentication 
   - Determines who you are
   - Verifies that no one is impersonating you
 - Authorization 
   - Says what you are allowed to do 
   - the name of the http header used for authentication

# Http Basic Authentication
 - Basic authentication part of the specification of http
   - send user name and pass with every request
   - uses authentication header annd keyword "basic"
     - put "username:password" together
     - convert them to base64
       - puts generic binary data into printable string
       - base64 is reversible
         - never use it with http, always use https       
  - ex curl -u user:pass    
  - use basic authentication to login screen, from there you can use multi-factor Authentication

# Storing password
 - Never store passwords 
 - Instead store the one way encryption "hash" values of the password
 - earlier bcrypt was the industry standard, but now scrypt is graining traction.
 - for hashing algorithm, the older the better as you know that it has been there for that long without being broken.

 # Bearer Token and HMAC
  - Bearer Token
    - added to the http spec with OAUTH2
    - uses authorization header & keyword "bearer"
    - if you log into any website via google authentication, then on the backend, you are already logged in to google and the server talks to google, gets a bearer token and adds it to the header
  - To prevent faked bearer  tokens, use cryptographic "signing"
    - cryptographic signing is a way to prove that the value was created by a specific person
    - HMAC ( hashed message authentication code)

# JWT
 - JSON web token 
 - HMAC gives you the signature then you have to find a way to get both the signature and the message together in your bearer token. JSON WebTokens or JWT does that for you
 - JWT consist of two JSON object and a signature ( which can be through HMAC or other signature algorithm)
   {Header }.{Payload}.Signature      // all encoded in base64
 - The information contained in the header describes the algorithm used to generate the signature. The decoded version of the header from
    the above example looks like:

    {

       "alg": "HS256",

       "typ": "JWT"

     }
 - All the claims within JWT authentication are stored in this part. Claims are used to provide authentication to the party receiving the
   token. For example, a server can set a claim saying ‘isAdmin: true’ and issue it to an administrative user upon successfully logging
   into the application. The admin user can now send this token in every consequent request he/she sends to the server to prove their
   identity.

   The decoded version of the payload from the JWT example provided above looks like:

   {

   "sub": "1234567890",

   "name": "John Doe",

   "iat": 1516239022

   }

  The ‘name’ field is used to identify the user to whom the token was issued to. The ‘sub’ and ‘iat’ are examples of registered claims and
  are short for ‘subject’ and ‘issued at’.

  - The signature part of a JWT is derived from the header and payload fields. The steps involved in creating this signature are described below:

1. Combine the base64url encoded representations of header and payload with a dot (.)

base64UrlEncode(header) + “.” + base64UrlEncode(payload)

2. Hash the above data with a secret-key only known to the server issuing the token. The hashing algorithm is the one described inside
the header.

hash_value = hash([base64UrlEncode(header) + “.” + base64UrlEncode(payload)], secret-key)

3. Base64Url encode the hash value obtained from the step above

Signature = base64UrlEncode(hash_value)

Because the ‘secret-key’ is only known to the server, only it can issue new tokens with a valid signature. Users can not forge tokens as
producing a valid Signature for the token requires the knowledge of the ‘secret-key’.

JWT find their applications in various authentication mechanisms. These are typically passed in the Authorization header when a user
submits a request to the client.

eg:
Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0I
joxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c

